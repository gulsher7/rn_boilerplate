---
description: 
globs: *.ts, *.tsx, src/**/*.{ts,tsx,js,json}, App.tsx,
alwaysApply: false
---
# NativeCraft - Project Architecture & Development Rules

## 1. Project Structure
```
src/
├── assets/        # Images, icons, fonts, and other static assets
├── components/    # Reusable UI components
├── config/        # App configuration files
├── context/       # React Context providers (ThemeContext, etc.)
├── hooks/         # Custom React hooks
├── lang/          # i18n translation files
├── models/        # Data models and interfaces
├── navigation/    # Navigation configuration
├── redux/         # State management
├── screens/       # Screen components
├── styles/        # Global styles and themes
├── typings/       # Global TypeScript types
└── utils/         # Utility functions
```

## 2. Development Workflow

### 2.1 Pre-Development Checklist
- [ ] Review Figma design thoroughly
- [ ] Identify reusable components
- [ ] Check existing components for reusability
- [ ] Note all colors used in the design
- [ ] List all static strings for i18n
- [ ] Identify required assets (icons, images)

### 2.2 Implementation Order
1. Add new colors to `styles/colors.ts`
2. Add translations to language files (`en.json` and `ar.json`)
3. Create/update reusable components
4. Implement screen layout
5. Add navigation (if needed)
6. Implement Redux actions/reducers
7. Connect UI to state management
8. Test dark/light themes and RTL/LTR support

## 3. Component Standards

### 3.1 Text & Internationalization

**ALWAYS use TextComp for text**:
```typescript
// ✓ CORRECT: TextComp with translation keys
import TextComp from '@/components/TextComp';

<TextComp text="WELCOME_MESSAGE" />

// For dynamic text without translation:
<TextComp isDynamic text="Hello World" />
```

**NEVER use direct Text component**:
```typescript
// ✗ INCORRECT: Direct Text component
import { Text } from 'react-native';

<Text>Welcome</Text>
```

### 3.2 Translation Keys

Define translation keys in both language files:
```json
// src/lang/en.json
{
    "LOGIN": "Login",
    "WELCOME_MESSAGE": "Welcome to NativeCraft"
}

// src/lang/ar.json
{
    "LOGIN": "تسجيل الدخول",
    "WELCOME_MESSAGE": "مرحبًا بك في NativeCraft"
}
```

Translation key guidelines:
- Use UPPERCASE with underscores for spaces
- Group related keys together
- Use variables with double curly braces:
  ```json
  "HELLO_USER": "Hello {{name}}"
  ```
- Reference variables in components:
  ```tsx
  <TextComp text="HELLO_USER" values={{ name: user.name }} />
  ```

## 4. Theme Management

### 4.1 Using Theme Colors

Access theme colors through the useTheme hook:
```typescript
import { useTheme } from '@/context/ThemeContext';
import { Colors } from '@/styles/colors';

const MyComponent = () => {
  const { theme } = useTheme();
  const colors = Colors[theme];
  
  return (
    <View style={{ backgroundColor: colors.background }}>
      <Text style={{ color: colors.text }}>Hello</Text>
    </View>
  );
};
```

### 4.2 Creating Color Themes

Define colors in `styles/colors.ts` with semantic naming:
```typescript
export const commonColors = {
  primary: '#007AFF',
  success: '#34C759',
  error: '#FF3B30',
  warning: '#FF9500',
};

export const Colors = {
  light: {
    background: '#FFFFFF',
    surface: '#F2F2F7',
    text: '#000000',
    textSecondary: '#3C3C43',
    // Reference common colors
    ...commonColors,
  },
  dark: {
    background: '#000000',
    surface: '#1C1C1E',
    text: '#FFFFFF',
    textSecondary: '#EBEBF5',
    // Reference common colors
    ...commonColors,
  },
};
```

## 5. RTL Support

### 5.1 Using the RTL Hook

```typescript
import useIsRTL from '@/hooks/useIsRTL';

const Component = () => {
  const isRTL = useIsRTL();
  
  return (
    <View style={{
      flexDirection: isRTL ? 'row-reverse' : 'row',
      alignItems: 'center',
    }}>
      {/* Components */}
    </View>
  );
};
```

### 5.2 RTL-Aware StyleSheets

Create RTL-aware styles using custom hooks:
```typescript
const useRTLStyles = (isRTL: boolean, theme: ThemeType) => {
  const colors = Colors[theme];
  
  return useMemo(() => StyleSheet.create({
    container: {
      flexDirection: isRTL ? 'row-reverse' : 'row',
      textAlign: isRTL ? 'right' : 'left',
      // Other styles
    },
    // Other style objects
  }), [isRTL, theme, colors]);
};

// Usage in component:
const styles = useRTLStyles(isRTL, theme);
```

## 6. Component Creation

### 6.1 Props Interface Pattern

```typescript
interface ButtonCompProps {
  text: string;
  onPress: () => void;
  isLoading?: boolean;
  disabled?: boolean;
  variant?: 'primary' | 'secondary' | 'outline';
  style?: ViewStyle;
  textStyle?: TextStyle;
}

const ButtonComp: React.FC<ButtonCompProps> = ({
  text,
  onPress,
  isLoading = false,
  disabled = false,
  variant = 'primary',
  style,
  textStyle,
}) => {
  // Component implementation
};
```

### 6.2 Component Documentation

Use TypeDoc style comments for component documentation:
```typescript
/**
 * A reusable button component with loading state and variants
 * 
 * @component
 * @example
 * <ButtonComp 
 *   text="LOGIN" 
 *   onPress={handleLogin}
 *   variant="primary"
 *   isLoading={isLoading}
 * />
 */
const ButtonComp: React.FC<ButtonCompProps> = (props) => {
  // Component implementation
};
```

## 7. File Naming & Organization

- **Components**: Use PascalCase with 'Comp' suffix (e.g., `ButtonComp.tsx`)
- **Screens**: Use PascalCase in their own folder (e.g., `Login/Login.tsx`)
- **Hooks**: Use camelCase with 'use' prefix (e.g., `useIsRTL.ts`)
- **Utilities**: Use camelCase (e.g., `secureStorage.ts`)
- **Models/Types**: Use PascalCase for interfaces/types (e.g., `AuthTypes.ts`)

## 8. Import Order

```typescript
// 1. React and React Native imports
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, Pressable } from 'react-native';

// 2. Third-party libraries
import { useTranslation } from 'react-i18next';
import { useNavigation } from '@react-navigation/native';

// 3. Project components
import TextComp from '@/components/TextComp';
import ButtonComp from '@/components/ButtonComp';

// 4. Hooks, contexts and Redux
import { useTheme } from '@/context/ThemeContext';
import useIsRTL from '@/hooks/useIsRTL';
import { useSelector, useDispatch } from '@/redux/hooks';

// 5. Actions, types, and utilities
import actions from '@/redux/actions';
import { AuthStackParamList } from '@/navigation/types';
import { secureStorage } from '@/utils/secureStorage';

// 6. Styles and constants
import { Colors } from '@/styles/colors';
import fontFamily from '@/styles/fontFamily';
import { moderateScale } from '@/styles/scaling';
```

## 9. Screen Development Guidelines

### 9.1 File Structure

Each screen should have its own folder:
```
screens/
└── Login/
    ├── Login.tsx      # Main screen component
    ├── styles.ts      # RTL-aware styles
    └── login.types.ts # Screen-specific types
```

### 9.2 Screen Template

```typescript
/**
 * Login screen component for user authentication
 */
import React, { useState } from 'react';
import { View } from 'react-native';
import WrapperContainer from '@/components/WrapperContainer';
import HeaderComp from '@/components/HeaderComp';
import TextComp from '@/components/TextComp';
import TextInputComp from '@/components/TextInputComp';
import ButtonComp from '@/components/ButtonComp';
import { useTheme } from '@/context/ThemeContext';
import useIsRTL from '@/hooks/useIsRTL';
import useRTLStyles from './styles';
import actions from '@/redux/actions';
import { useDispatch } from '@/redux/hooks';

const Login = () => {
  const { theme } = useTheme();
  const isRTL = useIsRTL();
  const styles = useRTLStyles(isRTL, theme);
  const dispatch = useDispatch();
  
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  
  const handleLogin = async () => {
    setLoading(true);
    try {
      await dispatch(actions.login({ email, password }));
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <WrapperContainer style={styles.container}>
      <HeaderComp title="LOGIN" showBack={true} />
      
      <View style={styles.content}>
        <TextComp text="WELCOME_BACK" style={styles.title} />
        
        <TextInputComp
          label="EMAIL"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
        />
        
        <TextInputComp
          label="PASSWORD"
          value={password}
          onChangeText={setPassword}
          isPassword
        />
        
        <ButtonComp
          text="LOGIN"
          onPress={handleLogin}
          isLoading={loading}
        />
      </View>
    </WrapperContainer>
  );
};

export default Login;
```

### 9.3 Style Organization

Keep styles in a separate file using the RTL-aware pattern:
```typescript
// styles.ts
import { StyleSheet } from 'react-native';
import { Colors, ThemeType } from '@/styles/colors';
import fontFamily from '@/styles/fontFamily';
import { moderateScale } from '@/styles/scaling';
import { useMemo } from 'react';

const useRTLStyles = (isRTL: boolean, theme: ThemeType) => {
  const colors = Colors[theme];
  
  return useMemo(() => StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background,
    },
    content: {
      flex: 1,
      padding: moderateScale(16),
    },
    title: {
      fontFamily: fontFamily.bold,
      fontSize: moderateScale(24),
      marginBottom: moderateScale(32),
      textAlign: isRTL ? 'right' : 'left',
    },
  }), [isRTL, theme, colors]);
};

export default useRTLStyles;
```

## 10. Responsive Design

Always use scaling utilities for responsive dimensions:
```typescript
import { moderateScale, verticalScale } from '@/styles/scaling';

const styles = StyleSheet.create({
  container: {
    padding: moderateScale(16),
    marginHorizontal: moderateScale(20),
    marginVertical: verticalScale(10),
  },
  title: {
    fontSize: moderateScale(24),
    lineHeight: moderateScale(32),
  },
});
```

## 11. Security & Storage

Use secure storage for sensitive data:
```typescript
import { secureStorage } from '@/utils/secureStorage';

// Store data
await secureStorage.setItem('AUTH_TOKEN', token);
await secureStorage.setObject('USER_DATA', userData);

// Retrieve data
const token = await secureStorage.getItem('AUTH_TOKEN');
const userData = await secureStorage.getObject('USER_DATA');

// Remove data
await secureStorage.removeItem('AUTH_TOKEN');
```

## 12. API Integration

Use Redux actions for API calls:
```typescript
// In redux/actions/authActions.ts
import apiInstance from '@/config/api';
import { createAsyncThunk } from '@reduxjs/toolkit';

export const login = createAsyncThunk(
  'auth/login',
  async (credentials, { rejectWithValue }) => {
    try {
      const response = await apiInstance.post('/auth/login', credentials);
      // Handle successful login
      return response.data;
    } catch (error) {
      // Handle error
      return rejectWithValue(error.response?.data || 'Login failed');
    }
  }
);

// In component
import actions from '@/redux/actions';
import { useDispatch } from '@/redux/hooks';

const dispatch = useDispatch();
await dispatch(actions.login(credentials));
```

## 13. SVG Usage

Use SVG files directly as components:
```typescript
// Import SVG file
import Logo from '@/assets/icons/logo.svg';

// Use as component
<Logo width={100} height={100} fill={colors.primary} />
```

## 14. Documentation Standards

Use TypeDoc style comments for documenting code:
```typescript
/**
 * @file App.tsx
 * @description Root application component that initializes core app functionality
 */

/**
 * Main application component that serves as the entry point for the app.
 * 
 * @returns {JSX.Element | null} The rendered app or null during font loading
 */
const App = () => {
  // Implementation
};
```

## 15. Testing Checklist

Before completing a feature:
1. ✓ Test on both iOS and Android
2. ✓ Test with different text lengths
3. ✓ Test Dark/Light themes
4. ✓ Test RTL/LTR layouts
5. ✓ Test different screen sizes
6. ✓ Test with slow network conditions
7. ✓ Test error states and edge cases
